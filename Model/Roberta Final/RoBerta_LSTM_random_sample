{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"RoBerta_LSTM_random_sample","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-pp3_2ZLq6NS","executionInfo":{"status":"ok","timestamp":1631349012929,"user_tz":420,"elapsed":6914,"user":{"displayName":"Huy Nghiem","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06903637911945605583"}},"outputId":"d7be5396-3acd-43bf-ad94-23102292966d"},"source":["from datetime import datetime\n","import tensorflow as tf\n","import pandas as pd\n","import numpy as np\n","import re, string\n","import time\n","import random\n","import gc\n","import os, sys\n","import json\n","from copy import deepcopy\n","\n","#####\n","# !pip install gdown\n","!pip install transformers\n","pd.options.display.max_colwidth = 500\n","#####\n","\n","import torch\n","\n","from transformers import BertForSequenceClassification, AdamW , BertConfig, BertModel\n","from transformers import RobertaConfig, RobertaModel, RobertaTokenizer, RobertaForSequenceClassification\n","from transformers import get_linear_schedule_with_warmup\n","from transformers import LineByLineTextDataset\n","\n","from torch.nn import LSTM, Dropout, Linear, BCELoss, CrossEntropyLoss, Softmax, ReLU, LeakyReLU, Tanh\n","from torch.nn.functional import softmax, relu\n","from torch.nn.utils.rnn import pack_padded_sequence\n","from torch.utils.data.dataset import Subset\n","\n","from sklearn.model_selection import KFold\n","from sklearn.metrics import accuracy_score, precision_score, confusion_matrix\n","\n","%load_ext autoreload \n","%autoreload 2"],"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: transformers in /usr/local/lib/python3.7/dist-packages (4.10.2)\n","Requirement already satisfied: tokenizers<0.11,>=0.10.1 in /usr/local/lib/python3.7/dist-packages (from transformers) (0.10.3)\n","Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.7/dist-packages (from transformers) (5.4.1)\n","Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.7/dist-packages (from transformers) (2019.12.20)\n","Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.7/dist-packages (from transformers) (1.19.5)\n","Requirement already satisfied: sacremoses in /usr/local/lib/python3.7/dist-packages (from transformers) (0.0.45)\n","Requirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from transformers) (2.23.0)\n","Requirement already satisfied: importlib-metadata in /usr/local/lib/python3.7/dist-packages (from transformers) (4.6.4)\n","Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.7/dist-packages (from transformers) (4.62.0)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.7/dist-packages (from transformers) (21.0)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.7/dist-packages (from transformers) (3.0.12)\n","Requirement already satisfied: huggingface-hub>=0.0.12 in /usr/local/lib/python3.7/dist-packages (from transformers) (0.0.16)\n","Requirement already satisfied: typing-extensions in /usr/local/lib/python3.7/dist-packages (from huggingface-hub>=0.0.12->transformers) (3.7.4.3)\n","Requirement already satisfied: pyparsing>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging->transformers) (2.4.7)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata->transformers) (3.5.0)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests->transformers) (1.24.3)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests->transformers) (2.10)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests->transformers) (2021.5.30)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests->transformers) (3.0.4)\n","Requirement already satisfied: joblib in /usr/local/lib/python3.7/dist-packages (from sacremoses->transformers) (1.0.1)\n","Requirement already satisfied: click in /usr/local/lib/python3.7/dist-packages (from sacremoses->transformers) (7.1.2)\n","Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from sacremoses->transformers) (1.15.0)\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MzEvkGACWMqX","executionInfo":{"status":"ok","timestamp":1631349012930,"user_tz":420,"elapsed":16,"user":{"displayName":"Huy Nghiem","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06903637911945605583"}},"outputId":"40897647-eb3a-4886-930f-3caea255311f"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DUYifLXWu1D0","executionInfo":{"status":"ok","timestamp":1631349012931,"user_tz":420,"elapsed":12,"user":{"displayName":"Huy Nghiem","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06903637911945605583"}},"outputId":"a8128718-cb14-4d7a-a9b2-cbb582fc2451"},"source":["!ls \"/content/drive/MyDrive/Colab Notebooks/Bert Hate Speech/Model\""],"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["'Bert Models'   models.py   __pycache__   RoBerta  'Roberta Final'\n"]}]},{"cell_type":"code","metadata":{"id":"f6srHxsX4FhM","executionInfo":{"status":"ok","timestamp":1631349012932,"user_tz":420,"elapsed":9,"user":{"displayName":"Huy Nghiem","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06903637911945605583"}}},"source":["PATH_PREFIX = '/content/drive/MyDrive/Colab Notebooks/Bert Hate Speech'"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"id":"C8keHP8s6Fj4","executionInfo":{"status":"ok","timestamp":1631349013595,"user_tz":420,"elapsed":672,"user":{"displayName":"Huy Nghiem","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06903637911945605583"}}},"source":["sys.path.append('/content/drive/MyDrive/Colab Notebooks/Bert Hate Speech/utils')\n","sys.path.append('/content/drive/MyDrive/Colab Notebooks/Bert Hate Speech/Model')\n","\n","from models import *\n","from text_processing import *"],"execution_count":5,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mFayi-JvrDHx","executionInfo":{"status":"ok","timestamp":1631349015147,"user_tz":420,"elapsed":1555,"user":{"displayName":"Huy Nghiem","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06903637911945605583"}},"outputId":"3ee53511-2a93-4203-d8ff-53bf195e967b"},"source":["# Enable GPU before proceeding\n","device_name = tf.test.gpu_device_name()\n","print(\"Device found:\", device_name)"],"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Device found: /device:GPU:0\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LLkb-vZhryC-","executionInfo":{"status":"ok","timestamp":1631349015148,"user_tz":420,"elapsed":27,"user":{"displayName":"Huy Nghiem","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06903637911945605583"}},"outputId":"2b2978ef-1f5e-46d7-ee42-874d5cf41adc"},"source":["# Test if CUDA is available, use it\n","if torch.cuda.is_available():\n","    device = torch.device('cuda')\n","else:\n","    device = torch.device('cpu')\n","print(\"Using CUDA Device:\", torch.cuda.get_device_name())"],"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Using CUDA Device: Tesla K80\n"]}]},{"cell_type":"markdown","metadata":{"id":"Jgmig-gyT5_U"},"source":["# DOWNLOAD AND PREPROCESS DATA"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TIGMfizwRlrM","executionInfo":{"status":"ok","timestamp":1631349015149,"user_tz":420,"elapsed":24,"user":{"displayName":"Huy Nghiem","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06903637911945605583"}},"outputId":"805e38fa-c8fb-416b-9b69-d8d62786dc9d"},"source":["train_dt, test_dt = load_data(PATH_PREFIX + '/Data/HER_final_data.csv', \n","                   dtype_dict={'tweetid':str, 'label':int, 'target':int, 'aggr':int})"],"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["label\n","0    1894\n","1     304\n","2     202\n","Name: label, dtype: int64\n","target\n","0    2003\n","1     367\n","2      25\n","3       5\n","Name: target, dtype: int64\n","aggr\n","0    1799\n","1     533\n","2      68\n","Name: aggr, dtype: int64\n"]}]},{"cell_type":"code","metadata":{"id":"xZGR5qyHprvi","executionInfo":{"status":"ok","timestamp":1631349015150,"user_tz":420,"elapsed":22,"user":{"displayName":"Huy Nghiem","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06903637911945605583"}}},"source":["x = random.sample('I hate you'.split(),1)"],"execution_count":9,"outputs":[]},{"cell_type":"code","metadata":{"id":"jF68_dnNqajq","executionInfo":{"status":"ok","timestamp":1631349015151,"user_tz":420,"elapsed":23,"user":{"displayName":"Huy Nghiem","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06903637911945605583"}}},"source":["def random_sample_tokens(df, n_sample=3):\n","    random_sent = df['text'].sample(1).values[0]\n","    sent_split = random_sent.split()\n","\n","    n_sample = min(n_sample, len(sent_split))\n","    w_sub = random.sample(sent_split, n_sample)\n","\n","    return w_sub"],"execution_count":10,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"y7dlJel8rAQb","executionInfo":{"status":"ok","timestamp":1631349015151,"user_tz":420,"elapsed":22,"user":{"displayName":"Huy Nghiem","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06903637911945605583"}},"outputId":"06c789f5-12f4-4c6d-a160-3dd3b827a533"},"source":["t = 'I hate to tell u this lol'\n","t_split = t.split()\n","random.sample(list(np.arange(len(t_split))), 2)"],"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[3, 4]"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","metadata":{"id":"_xCP0BT2sM2J","executionInfo":{"status":"ok","timestamp":1631349015152,"user_tz":420,"elapsed":20,"user":{"displayName":"Huy Nghiem","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06903637911945605583"}}},"source":["def random_word_replacement(t, df, n_sample=5):\n","    text_split = t.split()\n","    words_to_sub = random_sample_tokens(df, n_sample)\n","    \n","    n_sample = min(n_sample, len(words_to_sub))\n","    indices_to_replace = random.sample(range(len(text_split)), n_sample)\n","    # print(indices_to_replace)\n","    for pos, idx in enumerate(indices_to_replace): \n","        # print('idx', idx)\n","        # print(text_split[idx] )\n","        text_split[idx] = words_to_sub[pos]\n","\n","    return ' '.join(text_split)"],"execution_count":12,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":52},"id":"atAaCWGQsNQV","executionInfo":{"status":"ok","timestamp":1631349015153,"user_tz":420,"elapsed":21,"user":{"displayName":"Huy Nghiem","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06903637911945605583"}},"outputId":"c8547b67-e1a8-41bb-9cd3-6a3b99c1dbbd"},"source":["sent = 'Has anyone else notice how much younger @realDonaldTrump looks since he beat the #ChinaVirus The medication hes received has had a #FountainOfYouth reaction to his already handsome face. Whos with me on this?'\n","random_word_replacement(sent, train_dt[train_dt.label == 0])"],"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'Has anyone else notice how much younger <user> pizzophile since he beat the #ChinaVirus The medication hes received replying <user> a #FountainOfYouth reaction to his already handsome face. Whos with onho, on this?'"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","metadata":{"id":"pUV5ej2TsNVV","executionInfo":{"status":"ok","timestamp":1631349015154,"user_tz":420,"elapsed":21,"user":{"displayName":"Huy Nghiem","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06903637911945605583"}}},"source":["## Double the abusive and test data \n","train_abuse = train_dt[train_dt.label == 1]\n","temp_text = train_abuse.text.apply(lambda x: random_word_replacement(x, train_dt[train_dt.label == 1]) if len(x) > 50 else x)\n","train_abuse = train_abuse[train_abuse.columns.difference(['text'])]\n","train_abuse['text'] = temp_text\n","train_dt = pd.concat([train_dt, train_abuse])\n","\n","train_hate = train_dt[train_dt.label == 2]\n","temp_text = train_hate.text.apply(lambda x: random_word_replacement(x, train_dt[train_dt.label == 2]) if len(x) > 50 else x)\n","train_hate = train_hate[train_hate.columns.difference(['text'])]\n","train_hate['text'] = temp_text\n","train_dt = pd.concat([train_dt, train_hate])\n","\n","\n","train_dt = train_dt.sample(frac=1)"],"execution_count":14,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xDoraA4qsNZa","executionInfo":{"status":"ok","timestamp":1631349015154,"user_tz":420,"elapsed":21,"user":{"displayName":"Huy Nghiem","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06903637911945605583"}},"outputId":"edf7aeae-2b25-4da3-d5ad-2302b318ae55"},"source":["train_dt.groupby('label').label.count()"],"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["label\n","0    1894\n","1     608\n","2     404\n","Name: label, dtype: int64"]},"metadata":{},"execution_count":15}]},{"cell_type":"markdown","metadata":{"id":"42nIFpyRNTJw"},"source":["## Tokenize state"]},{"cell_type":"code","metadata":{"id":"GPIccBVB_yr1","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1631349015154,"user_tz":420,"elapsed":18,"user":{"displayName":"Huy Nghiem","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06903637911945605583"}},"outputId":"0d95558a-a0c4-4a87-ee0c-4b843c0ea553"},"source":["# import hashtag_dict \n","HASHTAG_DIR = '/content/drive/MyDrive/Colab Notebooks/Bert Hate Speech/utils/' \n","with open(HASHTAG_DIR + 'hashtag_dict.json', 'r') as f:\n","    hashtag_dict = json.load(f)\n","\n","# CUDA is memory hungry. Needs to reduce the max_len\n","MAX_LEN = 225\n","print(\"Maximum length of cleaned up dataset is:\", MAX_LEN)"],"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["Maximum length of cleaned up dataset is: 225\n"]}]},{"cell_type":"code","metadata":{"id":"CIPViSOuXhTA","executionInfo":{"status":"ok","timestamp":1631349021478,"user_tz":420,"elapsed":6340,"user":{"displayName":"Huy Nghiem","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06903637911945605583"}}},"source":["tokenizer = RobertaTokenizer.from_pretrained(\"roberta-base\")"],"execution_count":17,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HP_qSMkuohrO","executionInfo":{"status":"ok","timestamp":1631349024128,"user_tz":420,"elapsed":2668,"user":{"displayName":"Huy Nghiem","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06903637911945605583"}},"outputId":"03d95fc9-015c-44e8-e236-fdbcf9dce94d"},"source":["train_input_ids, train_attn_masks  = tokenizing(train_dt.text.values, tokenizer, MAX_LEN)\n","test_input_ids, test_attn_masks  = tokenizing(test_dt.text.values, tokenizer, MAX_LEN)"],"execution_count":18,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/transformers/tokenization_utils_base.py:2204: FutureWarning: The `pad_to_max_length` argument is deprecated and will be removed in a future version, use `padding=True` or `padding='longest'` to pad to the longest sequence in the batch, or use `padding='max_length'` to pad to a max length. In this case, you can give a specific length with `max_length` (e.g. `max_length=45`) or leave max_length to None to pad to the maximal input size of the model (e.g. 512 for Bert).\n","  FutureWarning,\n"]},{"output_type":"stream","name":"stdout","text":["Total time taken:  1.8683574199676514\n","Total time taken:  0.35555171966552734\n"]}]},{"cell_type":"code","metadata":{"id":"5UaN8FNEUbn9","executionInfo":{"status":"ok","timestamp":1631349024129,"user_tz":420,"elapsed":11,"user":{"displayName":"Huy Nghiem","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06903637911945605583"}}},"source":["varlist = ['label', 'target', 'aggr']\n","_, train_tensor = arrange_tensor(train_dt, train_input_ids, train_attn_masks ,varlist=varlist)\n","_, test_tensor  = arrange_tensor(test_dt, test_input_ids, test_attn_masks ,varlist=varlist)"],"execution_count":19,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8RNJyuEsVfCB","executionInfo":{"status":"ok","timestamp":1631349024130,"user_tz":420,"elapsed":10,"user":{"displayName":"Huy Nghiem","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06903637911945605583"}},"outputId":"ff35e243-8c22-4478-aacb-aebd8da4a3f9"},"source":["test_tensor[:][-1].shape"],"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["torch.Size([600])"]},"metadata":{},"execution_count":20}]},{"cell_type":"markdown","metadata":{"id":"jKEuQnyKzKaP"},"source":["# BUILD MODEL"]},{"cell_type":"markdown","metadata":{"id":"ptpLoOHEKWBx"},"source":["In this model, we will build an LSTM model leveraging BERT base hidden data on top. The key difference compared to simpleBert is that we need to save the parameters."]},{"cell_type":"code","metadata":{"id":"t0NtCmP8NM8B","executionInfo":{"status":"ok","timestamp":1631349024450,"user_tz":420,"elapsed":326,"user":{"displayName":"Huy Nghiem","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06903637911945605583"}}},"source":["SAVE_PATH = \"/content/drive/My Drive/Colab Notebooks/Bert Hate Speech/Saved Parameters/\""],"execution_count":21,"outputs":[]},{"cell_type":"code","metadata":{"id":"2K9sRD_qgCEY","executionInfo":{"status":"ok","timestamp":1631349024451,"user_tz":420,"elapsed":5,"user":{"displayName":"Huy Nghiem","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06903637911945605583"}}},"source":["def run_models(save_path:str, model_class, num_labels, num_tasks, max_len,\n","        num_epochs, loss_funcs:list, device,\n","        train_tensor, test_tensor, val_tensor=None, batch_size=20, label_ls = [[0,1,2]],\n","        seed_list = [101,211,307,401,503], save_seed=0):\n","\n","    final_metrics = dict()\n","    # Iterate through seeds\n","    for idx, s in enumerate(seed_list):\n","        print('========== Trying seed', s, '==========')\n","        # Reset the seed\n","        seed = s\n","        random.seed(seed)\n","        os.environ['PYTHONHASHSEED'] = str(seed)\n","        np.random.seed(seed)\n","        torch.manual_seed(seed)\n","        torch.cuda.manual_seed(seed)\n","        torch.backends.cudnn.deterministic = True\n","        torch.backends.cudnn.benchmark = True\n","    \n","        # print(\"Random num: \", random.randint(1,1000))\n","        \n","        gc.collect()\n","        torch.cuda.empty_cache()\n","\n","        # Initialize model\n","        model = model_class('roberta-base', num_labels=num_labels, max_len=max_len)\n","        optimizer = AdamW(model.parameters(),lr=2e-5, eps=1e-6, weight_decay=1e-3)\n","        build_params = {'device':device, 'optimizer': optimizer, 'loss_functions': loss_funcs}\n","        # build \n","        model.build(**build_params)\n","\n","        # train\n","        if val_tensor is None:\n","            model.train(train_tensor, batch_size = batch_size,\n","                        num_epochs=num_epochs, verbose=True)\n","        else: \n","            model.train(train_tensor, val_tensor=val_tensor, batch_size=batch_size,\n","                        num_epochs=num_epochs, verbose=True)\n","\n","        # evaluate\n","        _, logits, labels = model.evaluate(test_tensor)\n","        logits, labels = format_outputs(logits, labels, num_tasks)\n","        preds = get_labels_from_multi_logits(logits)\n","        res = print_report_multitask(labels, preds, label_ls )\n","\n","        final_metrics[s] = res\n","\n","        if idx==save_seed:\n","            model.save(save_path)\n","        del model\n","\n","    return final_metrics "],"execution_count":22,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_iTm811coQuf","executionInfo":{"status":"ok","timestamp":1631350143446,"user_tz":420,"elapsed":1119000,"user":{"displayName":"Huy Nghiem","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06903637911945605583"}},"outputId":"f5af2c83-c486-4bb7-ca86-0dc17ef06f1c"},"source":["###### !!CHECK THIS!! ######\n","model_class = RobertaLSTM\n","model_str = 'Roberta_LSTM'\n","###########################\n","target_ls = ['label','target','aggr']\n","num_labels =  [3,4,3]\n","num_tasks = len(num_labels)\n","label_ls = [[0,1,2],[0,1,2,3],[0,1,2]]\n","num_epochs = 5\n","# change correct weights\n","# weight_dict = calculate_class_weights(train_dt, target_ls)\n","# weight_ls  = [list(weight_dict[k].values()) for k in target_ls]\n","# loss_funcs = [CrossEntropyLoss(weight=torch.tensor(w).to(device)) for w in weight_ls]\n","loss_funcs = [CrossEntropyLoss()]*3\n","\n","model_params = {'num_labels':num_labels, 'num_tasks':num_tasks, \n","                'max_len':MAX_LEN,'label_ls':label_ls,\n","                'num_epochs':num_epochs, 'loss_funcs':loss_funcs,\n","                }\n","\n","results = run_models(save_path = SAVE_PATH, model_class=model_class, device=device, \n","     train_tensor=train_tensor, test_tensor=test_tensor, \n","     seed_list=[101],\n","      **model_params )"],"execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["========== Trying seed 101 ==========\n","Multitask training: 3 tasks \n"]},{"output_type":"stream","name":"stderr","text":["Some weights of the model checkpoint at roberta-base were not used when initializing RobertaModel: ['lm_head.dense.bias', 'lm_head.decoder.weight', 'lm_head.dense.weight', 'lm_head.layer_norm.weight', 'lm_head.layer_norm.bias', 'lm_head.bias']\n","- This IS expected if you are initializing RobertaModel from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).\n","- This IS NOT expected if you are initializing RobertaModel from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).\n"]},{"output_type":"stream","name":"stdout","text":["Multitask training: 3 tasks \n"]},{"output_type":"stream","name":"stderr","text":["Some weights of the model checkpoint at roberta-base were not used when initializing RobertaModel: ['lm_head.dense.bias', 'lm_head.decoder.weight', 'lm_head.dense.weight', 'lm_head.layer_norm.weight', 'lm_head.layer_norm.bias', 'lm_head.bias']\n","- This IS expected if you are initializing RobertaModel from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).\n","- This IS NOT expected if you are initializing RobertaModel from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).\n"]},{"output_type":"stream","name":"stdout","text":["Running Epoch  0\n","Training loss : [98.0871590077877, 75.10947932302952, 91.34056179225445]. Validation loss: []. Duration: 218.05975818634033\n","Running Epoch  1\n","Training loss : [73.52466478943825, 48.962660398334265, 68.63322529196739]. Validation loss: []. Duration: 218.56692385673523\n","Running Epoch  2\n","Training loss : [58.437322087585926, 39.16809889674187, 57.76464884728193]. Validation loss: []. Duration: 218.5681028366089\n","Running Epoch  3\n","Training loss : [49.60236779972911, 31.7484387177974, 48.92229599878192]. Validation loss: []. Duration: 218.56578516960144\n","Running Epoch  4\n","Training loss : [42.16645426303148, 27.03419409506023, 44.52957681193948]. Validation loss: []. Duration: 218.4732792377472\n","num_tasks 3\n","\n","-----Report for task 0:-----\n","\n","precision: [0.86813187 0.5483871  0.56521739]\n","recall   : [0.97731959 0.21794872 0.35135135]\n","fscore   : [0.91949564 0.31192661 0.43333333]\n","support  : [485  78  37]\n","\n","-----Report for task 1:-----\n","\n","precision: [0.89908257 0.78181818 0.         0.        ]\n","recall   : [0.97609562 0.49425287 0.         0.        ]\n","fscore   : [0.93600764 0.6056338  0.         0.        ]\n","support  : [502  87  10   1]\n","\n","-----Report for task 2:-----\n","\n","precision: [0.83531746 0.62105263 1.        ]\n","recall   : [0.95248869 0.42753623 0.05      ]\n","fscore   : [0.89006342 0.50643777 0.0952381 ]\n","support  : [442 138  20]\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]}]},{"cell_type":"code","metadata":{"id":"HPpGBDuFRMcl","executionInfo":{"status":"ok","timestamp":1631350143453,"user_tz":420,"elapsed":14,"user":{"displayName":"Huy Nghiem","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06903637911945605583"}}},"source":["RESULT_PATH = \"/content/drive/My Drive/Colab Notebooks/Bert Hate Speech/Results/\"\n","\n","specific_res = get_specific_results(results)\n","# specific_res.to_pickle(RESULT_PATH + model_str + '_specific.pkl')\n","\n","macro_res    = get_macro_results(results)\n","# macro_res.to_pickle(RESULT_PATH + model_str + '_macro.pkl')"],"execution_count":24,"outputs":[]},{"cell_type":"code","metadata":{"id":"M3V4slhXyCB_","colab":{"base_uri":"https://localhost:8080/","height":142},"executionInfo":{"status":"ok","timestamp":1631350143454,"user_tz":420,"elapsed":13,"user":{"displayName":"Huy Nghiem","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06903637911945605583"}},"outputId":"747f8d2e-2148-426c-e00e-4cd8cceed35e"},"source":["specific_res"],"execution_count":25,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Normal</th>\n","      <th>Abusive</th>\n","      <th>Hate</th>\n","      <th>Neither/NA</th>\n","      <th>Anti-Asian</th>\n","      <th>Anti-Black</th>\n","      <th>Both</th>\n","      <th>No.Agg.</th>\n","      <th>Some.Agg.</th>\n","      <th>Very.Agg.</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.87 +- 0.0</td>\n","      <td>0.55 +- 0.0</td>\n","      <td>0.57 +- 0.0</td>\n","      <td>0.9 +- 0.0</td>\n","      <td>0.78 +- 0.0</td>\n","      <td>--</td>\n","      <td>--</td>\n","      <td>0.84 +- 0.0</td>\n","      <td>0.62 +- 0.0</td>\n","      <td>1.0 +- 0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.98 +- 0.0</td>\n","      <td>0.22 +- 0.0</td>\n","      <td>0.35 +- 0.0</td>\n","      <td>0.98 +- 0.0</td>\n","      <td>0.49 +- 0.0</td>\n","      <td>--</td>\n","      <td>--</td>\n","      <td>0.95 +- 0.0</td>\n","      <td>0.43 +- 0.0</td>\n","      <td>0.05 +- 0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.92 +- 0.0</td>\n","      <td>0.31 +- 0.0</td>\n","      <td>0.43 +- 0.0</td>\n","      <td>0.94 +- 0.0</td>\n","      <td>0.61 +- 0.0</td>\n","      <td>--</td>\n","      <td>--</td>\n","      <td>0.89 +- 0.0</td>\n","      <td>0.51 +- 0.0</td>\n","      <td>0.1 +- 0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["        Normal      Abusive         Hate  ...      No.Agg.    Some.Agg.    Very.Agg.\n","0  0.87 +- 0.0  0.55 +- 0.0  0.57 +- 0.0  ...  0.84 +- 0.0  0.62 +- 0.0   1.0 +- 0.0\n","1  0.98 +- 0.0  0.22 +- 0.0  0.35 +- 0.0  ...  0.95 +- 0.0  0.43 +- 0.0  0.05 +- 0.0\n","2  0.92 +- 0.0  0.31 +- 0.0  0.43 +- 0.0  ...  0.89 +- 0.0  0.51 +- 0.0   0.1 +- 0.0\n","\n","[3 rows x 10 columns]"]},"metadata":{},"execution_count":25}]},{"cell_type":"code","metadata":{"id":"BbUQOvoq78Ru","colab":{"base_uri":"https://localhost:8080/","height":80},"executionInfo":{"status":"ok","timestamp":1631350143455,"user_tz":420,"elapsed":12,"user":{"displayName":"Huy Nghiem","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06903637911945605583"}},"outputId":"89b99242-8a48-4d8a-e283-632421d33369"},"source":["macro_res"],"execution_count":26,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","      <th>5</th>\n","      <th>6</th>\n","      <th>7</th>\n","      <th>8</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.66 +- 0.0</td>\n","      <td>0.52 +- 0.0</td>\n","      <td>0.58 +- 0.0</td>\n","      <td>0.84 +- 0.0</td>\n","      <td>0.74 +- 0.0</td>\n","      <td>0.78 +- 0.0</td>\n","      <td>0.82 +- 0.0</td>\n","      <td>0.48 +- 0.0</td>\n","      <td>0.6 +- 0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["             0            1            2  ...            6            7           8\n","0  0.66 +- 0.0  0.52 +- 0.0  0.58 +- 0.0  ...  0.82 +- 0.0  0.48 +- 0.0  0.6 +- 0.0\n","\n","[1 rows x 9 columns]"]},"metadata":{},"execution_count":26}]},{"cell_type":"code","metadata":{"id":"SAyhJ786-UiO","executionInfo":{"status":"ok","timestamp":1631350143456,"user_tz":420,"elapsed":12,"user":{"displayName":"Huy Nghiem","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06903637911945605583"}}},"source":[""],"execution_count":26,"outputs":[]}]}